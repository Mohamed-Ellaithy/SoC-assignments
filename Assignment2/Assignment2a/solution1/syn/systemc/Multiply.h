// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Multiply_HH_
#define _Multiply_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Multiply : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_in< sc_lv<32> > A_q0;
    sc_out< sc_lv<4> > B_address0;
    sc_out< sc_logic > B_ce0;
    sc_in< sc_lv<32> > B_q0;
    sc_out< sc_lv<4> > res_address0;
    sc_out< sc_logic > res_ce0;
    sc_out< sc_logic > res_we0;
    sc_out< sc_lv<32> > res_d0;
    sc_in< sc_lv<32> > res_q0;


    // Module declarations
    Multiply(sc_module_name name);
    SC_HAS_PROCESS(Multiply);

    ~Multiply();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i_2_fu_138_p2;
    sc_signal< sc_lv<3> > i_2_reg_293;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > tmp_1_cast_fu_152_p1;
    sc_signal< sc_lv<6> > tmp_1_cast_reg_298;
    sc_signal< sc_lv<1> > exitcond4_fu_132_p2;
    sc_signal< sc_lv<3> > j_2_fu_162_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > i_3_fu_188_p2;
    sc_signal< sc_lv<3> > i_3_reg_314;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<6> > tmp_4_cast_fu_202_p1;
    sc_signal< sc_lv<6> > tmp_4_cast_reg_319;
    sc_signal< sc_lv<1> > exitcond2_fu_182_p2;
    sc_signal< sc_lv<3> > j_3_fu_212_p2;
    sc_signal< sc_lv<3> > j_3_reg_328;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<6> > tmp_6_cast_fu_218_p1;
    sc_signal< sc_lv<6> > tmp_6_cast_reg_333;
    sc_signal< sc_lv<1> > exitcond1_fu_206_p2;
    sc_signal< sc_lv<4> > res_addr_1_reg_338;
    sc_signal< sc_lv<3> > k_1_fu_238_p2;
    sc_signal< sc_lv<3> > k_1_reg_346;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > exitcond_fu_232_p2;
    sc_signal< sc_lv<32> > A_load_reg_361;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > B_load_reg_366;
    sc_signal< sc_lv<32> > tmp_9_fu_280_p2;
    sc_signal< sc_lv<32> > tmp_9_reg_371;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<3> > i_reg_77;
    sc_signal< sc_lv<1> > exitcond3_fu_156_p2;
    sc_signal< sc_lv<3> > j_reg_88;
    sc_signal< sc_lv<3> > i_1_reg_99;
    sc_signal< sc_lv<3> > j_1_reg_110;
    sc_signal< sc_lv<3> > k_reg_121;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<64> > tmp_5_cast_fu_177_p1;
    sc_signal< sc_lv<64> > tmp_7_cast_fu_227_p1;
    sc_signal< sc_lv<64> > tmp_10_cast_fu_253_p1;
    sc_signal< sc_lv<64> > tmp_13_cast_fu_275_p1;
    sc_signal< sc_lv<32> > tmp_s_fu_284_p2;
    sc_signal< sc_lv<5> > tmp_fu_144_p3;
    sc_signal< sc_lv<6> > tmp_3_cast_fu_168_p1;
    sc_signal< sc_lv<6> > tmp_5_fu_172_p2;
    sc_signal< sc_lv<5> > tmp_2_fu_194_p3;
    sc_signal< sc_lv<6> > tmp_7_fu_222_p2;
    sc_signal< sc_lv<6> > tmp_8_cast_fu_244_p1;
    sc_signal< sc_lv<6> > tmp_1_fu_248_p2;
    sc_signal< sc_lv<5> > tmp_3_fu_258_p3;
    sc_signal< sc_lv<6> > tmp_12_cast_fu_266_p1;
    sc_signal< sc_lv<6> > tmp_4_fu_270_p2;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_ce0();
    void thread_B_address0();
    void thread_B_ce0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_206_p2();
    void thread_exitcond2_fu_182_p2();
    void thread_exitcond3_fu_156_p2();
    void thread_exitcond4_fu_132_p2();
    void thread_exitcond_fu_232_p2();
    void thread_i_2_fu_138_p2();
    void thread_i_3_fu_188_p2();
    void thread_j_2_fu_162_p2();
    void thread_j_3_fu_212_p2();
    void thread_k_1_fu_238_p2();
    void thread_res_address0();
    void thread_res_ce0();
    void thread_res_d0();
    void thread_res_we0();
    void thread_tmp_10_cast_fu_253_p1();
    void thread_tmp_12_cast_fu_266_p1();
    void thread_tmp_13_cast_fu_275_p1();
    void thread_tmp_1_cast_fu_152_p1();
    void thread_tmp_1_fu_248_p2();
    void thread_tmp_2_fu_194_p3();
    void thread_tmp_3_cast_fu_168_p1();
    void thread_tmp_3_fu_258_p3();
    void thread_tmp_4_cast_fu_202_p1();
    void thread_tmp_4_fu_270_p2();
    void thread_tmp_5_cast_fu_177_p1();
    void thread_tmp_5_fu_172_p2();
    void thread_tmp_6_cast_fu_218_p1();
    void thread_tmp_7_cast_fu_227_p1();
    void thread_tmp_7_fu_222_p2();
    void thread_tmp_8_cast_fu_244_p1();
    void thread_tmp_9_fu_280_p2();
    void thread_tmp_fu_144_p3();
    void thread_tmp_s_fu_284_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
