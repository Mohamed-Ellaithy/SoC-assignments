// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Multiply,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7z010clg225-1i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=322,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=145,HLS_SYN_LUT=346,HLS_VERSION=2018_3}" *)

module Multiply (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0,
        res_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [3:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [31:0] res_d0;
input  [31:0] res_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg[3:0] res_address0;
reg res_ce0;
reg res_we0;
reg[31:0] res_d0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_2_fu_138_p2;
reg   [2:0] i_2_reg_293;
wire    ap_CS_fsm_state2;
wire   [5:0] tmp_1_cast_fu_152_p1;
reg   [5:0] tmp_1_cast_reg_298;
wire   [0:0] exitcond4_fu_132_p2;
wire   [2:0] j_2_fu_162_p2;
wire    ap_CS_fsm_state3;
wire   [2:0] i_3_fu_188_p2;
reg   [2:0] i_3_reg_314;
wire    ap_CS_fsm_state4;
wire   [5:0] tmp_4_cast_fu_202_p1;
reg   [5:0] tmp_4_cast_reg_319;
wire   [0:0] exitcond2_fu_182_p2;
wire   [2:0] j_3_fu_212_p2;
reg   [2:0] j_3_reg_328;
wire    ap_CS_fsm_state5;
wire   [5:0] tmp_6_cast_fu_218_p1;
reg   [5:0] tmp_6_cast_reg_333;
wire   [0:0] exitcond1_fu_206_p2;
reg   [3:0] res_addr_1_reg_338;
wire   [2:0] k_1_fu_238_p2;
reg   [2:0] k_1_reg_346;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_232_p2;
reg  signed [31:0] A_load_reg_361;
wire    ap_CS_fsm_state7;
reg  signed [31:0] B_load_reg_366;
wire   [31:0] tmp_9_fu_280_p2;
reg   [31:0] tmp_9_reg_371;
wire    ap_CS_fsm_state8;
reg   [2:0] i_reg_77;
wire   [0:0] exitcond3_fu_156_p2;
reg   [2:0] j_reg_88;
reg   [2:0] i_1_reg_99;
reg   [2:0] j_1_reg_110;
reg   [2:0] k_reg_121;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_5_cast_fu_177_p1;
wire   [63:0] tmp_7_cast_fu_227_p1;
wire   [63:0] tmp_10_cast_fu_253_p1;
wire   [63:0] tmp_13_cast_fu_275_p1;
wire   [31:0] tmp_s_fu_284_p2;
wire   [4:0] tmp_fu_144_p3;
wire   [5:0] tmp_3_cast_fu_168_p1;
wire   [5:0] tmp_5_fu_172_p2;
wire   [4:0] tmp_2_fu_194_p3;
wire   [5:0] tmp_7_fu_222_p2;
wire   [5:0] tmp_8_cast_fu_244_p1;
wire   [5:0] tmp_1_fu_248_p2;
wire   [4:0] tmp_3_fu_258_p3;
wire   [5:0] tmp_12_cast_fu_266_p1;
wire   [5:0] tmp_4_fu_270_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_99 <= 3'd0;
    end else if (((exitcond1_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_reg_99 <= i_3_reg_314;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_156_p2 == 1'd1))) begin
        i_reg_77 <= i_2_reg_293;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_77 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_232_p2 == 1'd1))) begin
        j_1_reg_110 <= j_3_reg_328;
    end else if (((exitcond2_fu_182_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_1_reg_110 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_88 <= 3'd0;
    end else if (((exitcond3_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_88 <= j_2_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k_reg_121 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        k_reg_121 <= k_1_reg_346;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        A_load_reg_361 <= A_q0;
        B_load_reg_366 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_293 <= i_2_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_3_reg_314 <= i_3_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_3_reg_328 <= j_3_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_1_reg_346 <= k_1_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        res_addr_1_reg_338 <= tmp_7_cast_fu_227_p1;
        tmp_6_cast_reg_333[2 : 0] <= tmp_6_cast_fu_218_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_cast_reg_298[4 : 2] <= tmp_1_cast_fu_152_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_182_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_4_cast_reg_319[4 : 2] <= tmp_4_cast_fu_202_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_9_reg_371 <= tmp_9_fu_280_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        res_address0 = res_addr_1_reg_338;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        res_address0 = tmp_5_cast_fu_177_p1;
    end else begin
        res_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_d0 = tmp_s_fu_284_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        res_d0 = 32'd0;
    end else begin
        res_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((exitcond3_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_156_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond1_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_232_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_10_cast_fu_253_p1;

assign B_address0 = tmp_13_cast_fu_275_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_206_p2 = ((j_1_reg_110 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_fu_182_p2 = ((i_1_reg_99 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond3_fu_156_p2 = ((j_reg_88 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond4_fu_132_p2 = ((i_reg_77 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_232_p2 = ((k_reg_121 == 3'd4) ? 1'b1 : 1'b0);

assign i_2_fu_138_p2 = (i_reg_77 + 3'd1);

assign i_3_fu_188_p2 = (i_1_reg_99 + 3'd1);

assign j_2_fu_162_p2 = (j_reg_88 + 3'd1);

assign j_3_fu_212_p2 = (j_1_reg_110 + 3'd1);

assign k_1_fu_238_p2 = (k_reg_121 + 3'd1);

assign tmp_10_cast_fu_253_p1 = tmp_1_fu_248_p2;

assign tmp_12_cast_fu_266_p1 = tmp_3_fu_258_p3;

assign tmp_13_cast_fu_275_p1 = tmp_4_fu_270_p2;

assign tmp_1_cast_fu_152_p1 = tmp_fu_144_p3;

assign tmp_1_fu_248_p2 = (tmp_8_cast_fu_244_p1 + tmp_4_cast_reg_319);

assign tmp_2_fu_194_p3 = {{i_1_reg_99}, {2'd0}};

assign tmp_3_cast_fu_168_p1 = j_reg_88;

assign tmp_3_fu_258_p3 = {{k_reg_121}, {2'd0}};

assign tmp_4_cast_fu_202_p1 = tmp_2_fu_194_p3;

assign tmp_4_fu_270_p2 = (tmp_6_cast_reg_333 + tmp_12_cast_fu_266_p1);

assign tmp_5_cast_fu_177_p1 = tmp_5_fu_172_p2;

assign tmp_5_fu_172_p2 = (tmp_1_cast_reg_298 + tmp_3_cast_fu_168_p1);

assign tmp_6_cast_fu_218_p1 = j_1_reg_110;

assign tmp_7_cast_fu_227_p1 = tmp_7_fu_222_p2;

assign tmp_7_fu_222_p2 = (tmp_4_cast_reg_319 + tmp_6_cast_fu_218_p1);

assign tmp_8_cast_fu_244_p1 = k_reg_121;

assign tmp_9_fu_280_p2 = ($signed(A_load_reg_361) * $signed(B_load_reg_366));

assign tmp_fu_144_p3 = {{i_reg_77}, {2'd0}};

assign tmp_s_fu_284_p2 = (res_q0 + tmp_9_reg_371);

always @ (posedge ap_clk) begin
    tmp_1_cast_reg_298[1:0] <= 2'b00;
    tmp_1_cast_reg_298[5] <= 1'b0;
    tmp_4_cast_reg_319[1:0] <= 2'b00;
    tmp_4_cast_reg_319[5] <= 1'b0;
    tmp_6_cast_reg_333[5:3] <= 3'b000;
end

endmodule //Multiply
