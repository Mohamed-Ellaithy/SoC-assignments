// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "multiply.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic multiply::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic multiply::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> multiply::ap_ST_fsm_state1 = "1";
const sc_lv<9> multiply::ap_ST_fsm_state2 = "10";
const sc_lv<9> multiply::ap_ST_fsm_state3 = "100";
const sc_lv<9> multiply::ap_ST_fsm_state4 = "1000";
const sc_lv<9> multiply::ap_ST_fsm_state5 = "10000";
const sc_lv<9> multiply::ap_ST_fsm_state6 = "100000";
const sc_lv<9> multiply::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> multiply::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> multiply::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> multiply::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> multiply::ap_const_lv32_1 = "1";
const sc_lv<1> multiply::ap_const_lv1_0 = "0";
const sc_lv<32> multiply::ap_const_lv32_2 = "10";
const sc_lv<32> multiply::ap_const_lv32_3 = "11";
const sc_lv<32> multiply::ap_const_lv32_4 = "100";
const sc_lv<32> multiply::ap_const_lv32_5 = "101";
const sc_lv<32> multiply::ap_const_lv32_6 = "110";
const sc_lv<32> multiply::ap_const_lv32_7 = "111";
const sc_lv<3> multiply::ap_const_lv3_0 = "000";
const sc_lv<1> multiply::ap_const_lv1_1 = "1";
const sc_lv<32> multiply::ap_const_lv32_8 = "1000";
const sc_lv<3> multiply::ap_const_lv3_4 = "100";
const sc_lv<3> multiply::ap_const_lv3_1 = "1";
const sc_lv<2> multiply::ap_const_lv2_0 = "00";
const bool multiply::ap_const_boolean_1 = true;

multiply::multiply(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_10_cast_fu_253_p1 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_B_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_13_cast_fu_275_p1 );

    SC_METHOD(thread_B_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond2_fu_182_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond2_fu_182_p2 );

    SC_METHOD(thread_exitcond1_fu_206_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( j_1_reg_110 );

    SC_METHOD(thread_exitcond2_fu_182_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_1_reg_99 );

    SC_METHOD(thread_exitcond3_fu_156_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_88 );

    SC_METHOD(thread_exitcond4_fu_132_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_77 );

    SC_METHOD(thread_exitcond_fu_232_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( k_reg_121 );

    SC_METHOD(thread_i_2_fu_138_p2);
    sensitive << ( i_reg_77 );

    SC_METHOD(thread_i_3_fu_188_p2);
    sensitive << ( i_1_reg_99 );

    SC_METHOD(thread_j_2_fu_162_p2);
    sensitive << ( j_reg_88 );

    SC_METHOD(thread_j_3_fu_212_p2);
    sensitive << ( j_1_reg_110 );

    SC_METHOD(thread_k_1_fu_238_p2);
    sensitive << ( k_reg_121 );

    SC_METHOD(thread_res_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( res_addr_1_reg_338 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_5_cast_fu_177_p1 );

    SC_METHOD(thread_res_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_res_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_s_fu_284_p2 );

    SC_METHOD(thread_res_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond3_fu_156_p2 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_tmp_10_cast_fu_253_p1);
    sensitive << ( tmp_1_fu_248_p2 );

    SC_METHOD(thread_tmp_12_cast_fu_266_p1);
    sensitive << ( tmp_3_fu_258_p3 );

    SC_METHOD(thread_tmp_13_cast_fu_275_p1);
    sensitive << ( tmp_4_fu_270_p2 );

    SC_METHOD(thread_tmp_1_cast_fu_152_p1);
    sensitive << ( tmp_fu_144_p3 );

    SC_METHOD(thread_tmp_1_fu_248_p2);
    sensitive << ( tmp_4_cast_reg_319 );
    sensitive << ( tmp_8_cast_fu_244_p1 );

    SC_METHOD(thread_tmp_2_fu_194_p3);
    sensitive << ( i_1_reg_99 );

    SC_METHOD(thread_tmp_3_cast_fu_168_p1);
    sensitive << ( j_reg_88 );

    SC_METHOD(thread_tmp_3_fu_258_p3);
    sensitive << ( k_reg_121 );

    SC_METHOD(thread_tmp_4_cast_fu_202_p1);
    sensitive << ( tmp_2_fu_194_p3 );

    SC_METHOD(thread_tmp_4_fu_270_p2);
    sensitive << ( tmp_6_cast_reg_333 );
    sensitive << ( tmp_12_cast_fu_266_p1 );

    SC_METHOD(thread_tmp_5_cast_fu_177_p1);
    sensitive << ( tmp_5_fu_172_p2 );

    SC_METHOD(thread_tmp_5_fu_172_p2);
    sensitive << ( tmp_1_cast_reg_298 );
    sensitive << ( tmp_3_cast_fu_168_p1 );

    SC_METHOD(thread_tmp_6_cast_fu_218_p1);
    sensitive << ( j_1_reg_110 );

    SC_METHOD(thread_tmp_7_cast_fu_227_p1);
    sensitive << ( tmp_7_fu_222_p2 );

    SC_METHOD(thread_tmp_7_fu_222_p2);
    sensitive << ( tmp_4_cast_reg_319 );
    sensitive << ( tmp_6_cast_fu_218_p1 );

    SC_METHOD(thread_tmp_8_cast_fu_244_p1);
    sensitive << ( k_reg_121 );

    SC_METHOD(thread_tmp_9_fu_280_p2);
    sensitive << ( A_load_reg_361 );
    sensitive << ( B_load_reg_366 );

    SC_METHOD(thread_tmp_fu_144_p3);
    sensitive << ( i_reg_77 );

    SC_METHOD(thread_tmp_s_fu_284_p2);
    sensitive << ( res_q0 );
    sensitive << ( tmp_9_reg_371 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond4_fu_132_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond2_fu_182_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond1_fu_206_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_fu_232_p2 );
    sensitive << ( exitcond3_fu_156_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "multiply_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, B_address0, "(port)B_address0");
    sc_trace(mVcdFile, B_ce0, "(port)B_ce0");
    sc_trace(mVcdFile, B_q0, "(port)B_q0");
    sc_trace(mVcdFile, res_address0, "(port)res_address0");
    sc_trace(mVcdFile, res_ce0, "(port)res_ce0");
    sc_trace(mVcdFile, res_we0, "(port)res_we0");
    sc_trace(mVcdFile, res_d0, "(port)res_d0");
    sc_trace(mVcdFile, res_q0, "(port)res_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_2_fu_138_p2, "i_2_fu_138_p2");
    sc_trace(mVcdFile, i_2_reg_293, "i_2_reg_293");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_1_cast_fu_152_p1, "tmp_1_cast_fu_152_p1");
    sc_trace(mVcdFile, tmp_1_cast_reg_298, "tmp_1_cast_reg_298");
    sc_trace(mVcdFile, exitcond4_fu_132_p2, "exitcond4_fu_132_p2");
    sc_trace(mVcdFile, j_2_fu_162_p2, "j_2_fu_162_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_3_fu_188_p2, "i_3_fu_188_p2");
    sc_trace(mVcdFile, i_3_reg_314, "i_3_reg_314");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_4_cast_fu_202_p1, "tmp_4_cast_fu_202_p1");
    sc_trace(mVcdFile, tmp_4_cast_reg_319, "tmp_4_cast_reg_319");
    sc_trace(mVcdFile, exitcond2_fu_182_p2, "exitcond2_fu_182_p2");
    sc_trace(mVcdFile, j_3_fu_212_p2, "j_3_fu_212_p2");
    sc_trace(mVcdFile, j_3_reg_328, "j_3_reg_328");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_6_cast_fu_218_p1, "tmp_6_cast_fu_218_p1");
    sc_trace(mVcdFile, tmp_6_cast_reg_333, "tmp_6_cast_reg_333");
    sc_trace(mVcdFile, exitcond1_fu_206_p2, "exitcond1_fu_206_p2");
    sc_trace(mVcdFile, res_addr_1_reg_338, "res_addr_1_reg_338");
    sc_trace(mVcdFile, k_1_fu_238_p2, "k_1_fu_238_p2");
    sc_trace(mVcdFile, k_1_reg_346, "k_1_reg_346");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, exitcond_fu_232_p2, "exitcond_fu_232_p2");
    sc_trace(mVcdFile, A_load_reg_361, "A_load_reg_361");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, B_load_reg_366, "B_load_reg_366");
    sc_trace(mVcdFile, tmp_9_fu_280_p2, "tmp_9_fu_280_p2");
    sc_trace(mVcdFile, tmp_9_reg_371, "tmp_9_reg_371");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i_reg_77, "i_reg_77");
    sc_trace(mVcdFile, exitcond3_fu_156_p2, "exitcond3_fu_156_p2");
    sc_trace(mVcdFile, j_reg_88, "j_reg_88");
    sc_trace(mVcdFile, i_1_reg_99, "i_1_reg_99");
    sc_trace(mVcdFile, j_1_reg_110, "j_1_reg_110");
    sc_trace(mVcdFile, k_reg_121, "k_reg_121");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_5_cast_fu_177_p1, "tmp_5_cast_fu_177_p1");
    sc_trace(mVcdFile, tmp_7_cast_fu_227_p1, "tmp_7_cast_fu_227_p1");
    sc_trace(mVcdFile, tmp_10_cast_fu_253_p1, "tmp_10_cast_fu_253_p1");
    sc_trace(mVcdFile, tmp_13_cast_fu_275_p1, "tmp_13_cast_fu_275_p1");
    sc_trace(mVcdFile, tmp_s_fu_284_p2, "tmp_s_fu_284_p2");
    sc_trace(mVcdFile, tmp_fu_144_p3, "tmp_fu_144_p3");
    sc_trace(mVcdFile, tmp_3_cast_fu_168_p1, "tmp_3_cast_fu_168_p1");
    sc_trace(mVcdFile, tmp_5_fu_172_p2, "tmp_5_fu_172_p2");
    sc_trace(mVcdFile, tmp_2_fu_194_p3, "tmp_2_fu_194_p3");
    sc_trace(mVcdFile, tmp_7_fu_222_p2, "tmp_7_fu_222_p2");
    sc_trace(mVcdFile, tmp_8_cast_fu_244_p1, "tmp_8_cast_fu_244_p1");
    sc_trace(mVcdFile, tmp_1_fu_248_p2, "tmp_1_fu_248_p2");
    sc_trace(mVcdFile, tmp_3_fu_258_p3, "tmp_3_fu_258_p3");
    sc_trace(mVcdFile, tmp_12_cast_fu_266_p1, "tmp_12_cast_fu_266_p1");
    sc_trace(mVcdFile, tmp_4_fu_270_p2, "tmp_4_fu_270_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("multiply.hdltvin.dat");
    mHdltvoutHandle.open("multiply.hdltvout.dat");
}

multiply::~multiply() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void multiply::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond4_fu_132_p2.read(), ap_const_lv1_1))) {
        i_1_reg_99 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_206_p2.read(), ap_const_lv1_1))) {
        i_1_reg_99 = i_3_reg_314.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond3_fu_156_p2.read(), ap_const_lv1_1))) {
        i_reg_77 = i_2_reg_293.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_77 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_232_p2.read(), ap_const_lv1_1))) {
        j_1_reg_110 = j_3_reg_328.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_182_p2.read()))) {
        j_1_reg_110 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond4_fu_132_p2.read(), ap_const_lv1_0))) {
        j_reg_88 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_156_p2.read()))) {
        j_reg_88 = j_2_fu_162_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_206_p2.read()))) {
        k_reg_121 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        k_reg_121 = k_1_reg_346.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        A_load_reg_361 = A_q0.read();
        B_load_reg_366 = B_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_2_reg_293 = i_2_fu_138_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_3_reg_314 = i_3_fu_188_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        j_3_reg_328 = j_3_fu_212_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        k_1_reg_346 = k_1_fu_238_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_206_p2.read()))) {
        res_addr_1_reg_338 =  (sc_lv<4>) (tmp_7_cast_fu_227_p1.read());
        tmp_6_cast_reg_333 = tmp_6_cast_fu_218_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond4_fu_132_p2.read(), ap_const_lv1_0))) {
        tmp_1_cast_reg_298 = tmp_1_cast_fu_152_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_182_p2.read()))) {
        tmp_4_cast_reg_319 = tmp_4_cast_fu_202_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_9_reg_371 = tmp_9_fu_280_p2.read();
    }
}

void multiply::thread_A_address0() {
    A_address0 =  (sc_lv<4>) (tmp_10_cast_fu_253_p1.read());
}

void multiply::thread_A_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void multiply::thread_B_address0() {
    B_address0 =  (sc_lv<4>) (tmp_13_cast_fu_275_p1.read());
}

void multiply::thread_B_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        B_ce0 = ap_const_logic_1;
    } else {
        B_ce0 = ap_const_logic_0;
    }
}

void multiply::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void multiply::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void multiply::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void multiply::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void multiply::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void multiply::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void multiply::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void multiply::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void multiply::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void multiply::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_182_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void multiply::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void multiply::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_182_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void multiply::thread_exitcond1_fu_206_p2() {
    exitcond1_fu_206_p2 = (!j_1_reg_110.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_1_reg_110.read() == ap_const_lv3_4);
}

void multiply::thread_exitcond2_fu_182_p2() {
    exitcond2_fu_182_p2 = (!i_1_reg_99.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_99.read() == ap_const_lv3_4);
}

void multiply::thread_exitcond3_fu_156_p2() {
    exitcond3_fu_156_p2 = (!j_reg_88.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_88.read() == ap_const_lv3_4);
}

void multiply::thread_exitcond4_fu_132_p2() {
    exitcond4_fu_132_p2 = (!i_reg_77.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_77.read() == ap_const_lv3_4);
}

void multiply::thread_exitcond_fu_232_p2() {
    exitcond_fu_232_p2 = (!k_reg_121.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_121.read() == ap_const_lv3_4);
}

void multiply::thread_i_2_fu_138_p2() {
    i_2_fu_138_p2 = (!i_reg_77.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_77.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void multiply::thread_i_3_fu_188_p2() {
    i_3_fu_188_p2 = (!i_1_reg_99.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_1_reg_99.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void multiply::thread_j_2_fu_162_p2() {
    j_2_fu_162_p2 = (!j_reg_88.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_reg_88.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void multiply::thread_j_3_fu_212_p2() {
    j_3_fu_212_p2 = (!j_1_reg_110.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_1_reg_110.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void multiply::thread_k_1_fu_238_p2() {
    k_1_fu_238_p2 = (!k_reg_121.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_reg_121.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void multiply::thread_res_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        res_address0 = res_addr_1_reg_338.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        res_address0 =  (sc_lv<4>) (tmp_5_cast_fu_177_p1.read());
    } else {
        res_address0 = "XXXX";
    }
}

void multiply::thread_res_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        res_ce0 = ap_const_logic_1;
    } else {
        res_ce0 = ap_const_logic_0;
    }
}

void multiply::thread_res_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        res_d0 = tmp_s_fu_284_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        res_d0 = ap_const_lv32_0;
    } else {
        res_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void multiply::thread_res_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_156_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        res_we0 = ap_const_logic_1;
    } else {
        res_we0 = ap_const_logic_0;
    }
}

void multiply::thread_tmp_10_cast_fu_253_p1() {
    tmp_10_cast_fu_253_p1 = esl_zext<64,6>(tmp_1_fu_248_p2.read());
}

void multiply::thread_tmp_12_cast_fu_266_p1() {
    tmp_12_cast_fu_266_p1 = esl_zext<6,5>(tmp_3_fu_258_p3.read());
}

void multiply::thread_tmp_13_cast_fu_275_p1() {
    tmp_13_cast_fu_275_p1 = esl_zext<64,6>(tmp_4_fu_270_p2.read());
}

void multiply::thread_tmp_1_cast_fu_152_p1() {
    tmp_1_cast_fu_152_p1 = esl_zext<6,5>(tmp_fu_144_p3.read());
}

void multiply::thread_tmp_1_fu_248_p2() {
    tmp_1_fu_248_p2 = (!tmp_8_cast_fu_244_p1.read().is_01() || !tmp_4_cast_reg_319.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_8_cast_fu_244_p1.read()) + sc_biguint<6>(tmp_4_cast_reg_319.read()));
}

void multiply::thread_tmp_2_fu_194_p3() {
    tmp_2_fu_194_p3 = esl_concat<3,2>(i_1_reg_99.read(), ap_const_lv2_0);
}

void multiply::thread_tmp_3_cast_fu_168_p1() {
    tmp_3_cast_fu_168_p1 = esl_zext<6,3>(j_reg_88.read());
}

void multiply::thread_tmp_3_fu_258_p3() {
    tmp_3_fu_258_p3 = esl_concat<3,2>(k_reg_121.read(), ap_const_lv2_0);
}

void multiply::thread_tmp_4_cast_fu_202_p1() {
    tmp_4_cast_fu_202_p1 = esl_zext<6,5>(tmp_2_fu_194_p3.read());
}

void multiply::thread_tmp_4_fu_270_p2() {
    tmp_4_fu_270_p2 = (!tmp_6_cast_reg_333.read().is_01() || !tmp_12_cast_fu_266_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_6_cast_reg_333.read()) + sc_biguint<6>(tmp_12_cast_fu_266_p1.read()));
}

void multiply::thread_tmp_5_cast_fu_177_p1() {
    tmp_5_cast_fu_177_p1 = esl_zext<64,6>(tmp_5_fu_172_p2.read());
}

void multiply::thread_tmp_5_fu_172_p2() {
    tmp_5_fu_172_p2 = (!tmp_1_cast_reg_298.read().is_01() || !tmp_3_cast_fu_168_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_1_cast_reg_298.read()) + sc_biguint<6>(tmp_3_cast_fu_168_p1.read()));
}

void multiply::thread_tmp_6_cast_fu_218_p1() {
    tmp_6_cast_fu_218_p1 = esl_zext<6,3>(j_1_reg_110.read());
}

void multiply::thread_tmp_7_cast_fu_227_p1() {
    tmp_7_cast_fu_227_p1 = esl_zext<64,6>(tmp_7_fu_222_p2.read());
}

void multiply::thread_tmp_7_fu_222_p2() {
    tmp_7_fu_222_p2 = (!tmp_4_cast_reg_319.read().is_01() || !tmp_6_cast_fu_218_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_4_cast_reg_319.read()) + sc_biguint<6>(tmp_6_cast_fu_218_p1.read()));
}

void multiply::thread_tmp_8_cast_fu_244_p1() {
    tmp_8_cast_fu_244_p1 = esl_zext<6,3>(k_reg_121.read());
}

void multiply::thread_tmp_9_fu_280_p2() {
    tmp_9_fu_280_p2 = (!A_load_reg_361.read().is_01() || !B_load_reg_366.read().is_01())? sc_lv<32>(): sc_bigint<32>(A_load_reg_361.read()) * sc_bigint<32>(B_load_reg_366.read());
}

void multiply::thread_tmp_fu_144_p3() {
    tmp_fu_144_p3 = esl_concat<3,2>(i_reg_77.read(), ap_const_lv2_0);
}

void multiply::thread_tmp_s_fu_284_p2() {
    tmp_s_fu_284_p2 = (!res_q0.read().is_01() || !tmp_9_reg_371.read().is_01())? sc_lv<32>(): (sc_biguint<32>(res_q0.read()) + sc_biguint<32>(tmp_9_reg_371.read()));
}

void multiply::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond4_fu_132_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond3_fu_156_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond2_fu_182_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond1_fu_206_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(exitcond_fu_232_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

void multiply::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address0\" :  \"" << A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce0\" :  \"" << A_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q0\" :  \"" << A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_address0\" :  \"" << B_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_ce0\" :  \"" << B_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_q0\" :  \"" << B_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_address0\" :  \"" << res_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_ce0\" :  \"" << res_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_we0\" :  \"" << res_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_d0\" :  \"" << res_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"res_q0\" :  \"" << res_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

